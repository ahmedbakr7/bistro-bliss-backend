user:
name not null varchar
email not null varchar unique
password not null varchar unique
phonenumber not null varcahr unique  // hashed
role  :["user","admin"]
image: varchar

product:
name
description
category
price
image

order:    // in nosql this should contain an array of order details
user_id     fk
total_price   int default 0
status      ["draft","created","preparing","ready","delivering","received"]  not null
accepted_at
shipped_at
delivered_at

order_details:
product_id  fk
order_id  fk
quantity  int default 1
price_snapshot  int not null
name_snapshot   varchar default product_id.name


bookings:
user_id
booked_time
number_of_people
status









import { DataTypes, STRING } from "sequelize";
import sequelize from "../util/database";

export interface Order {
    id?: number;
    name: string;
    email: string;
    password: string;
    phoneNumber: string;
    profilePic: string;
    // Pseudo / computed property (not stored in DB)
    totalPrice?: number;
}

const OrderModel = sequelize.define(
    "Order",
    {
        status: {
            type: DataTypes.ENUM(
                "cancled",
                "draft",
                "created",
                "preparing",
                "ready",
                "delivering",
                "received"
            ),
            defaultValue: "draft",
        },
        acceptedAt: { type: DataTypes.DATE },
        deliveredAt: { type: DataTypes.DATE },
        receivedAt: { type: DataTypes.DATE },
        // Virtual attribute. When you eager-load OrderDetails it will compute in JS;
        // When you use the scope `withTotalPrice` it will be computed by the DB via a subquery.
        totalPrice: {
            type: DataTypes.VIRTUAL(DataTypes.DECIMAL),
            get(this: any) {
                const details = this.get("order_details") || this.get("OrderDetails");
                if (details && Array.isArray(details)) {
                    return details.reduce(
                        (sum: number, d: any) =>
                            sum + (Number(d.quantity) || 0) * (Number(d.unit_price || d.unitPrice) || 0),
                        0
                    );
                }
                // May be populated by SQL scope (withTotalPrice) alias
                const raw = this.getDataValue("totalPrice");
                return raw != null ? Number(raw) : 0;
            },
        },
    },
    {
        tableName: "orders",
        underscored: true,
        paranoid: true,
        timestamps: true,
    }
);

// Scope that asks the database to calculate totalPrice using a correlated subquery
// Usage: OrderModel.scope('withTotalPrice').findByPk(id)
OrderModel.addScope("withTotalPrice", {
    attributes: {
        include: [
            [
                sequelize.literal(`(
                    SELECT COALESCE(SUM(od.quantity * od.unit_price), 0)
                    FROM order_details od
                    WHERE od.order_id = "Order".id
                )`),
                "totalPrice",
            ],
        ],
    },
});

export default OrderModel;
